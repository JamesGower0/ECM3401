import mysql.connector
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from imblearn.over_sampling import SMOTE
from sklearn.decomposition import PCA
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from collections import Counter

# MySQL database configuration
db_config = {
    'username': 'root',
    'password': 'b5CaQ9WK2',
    'host': '127.0.0.1',
    'port': 3306,
    'database': 'chess_openings'
}

# Create a connection to the database
connection = mysql.connector.connect(
    host=db_config['host'],
    user=db_config['username'],
    password=db_config['password'],
    database=db_config['database'],
    port=db_config['port']
)

# Query to get the chess opening data
query = "SELECT opening_name, WhiteElo, BlackElo, Event, Result, endgame FROM openings WHERE endgame != 'endgame not reached'"

# Retrieve data into a pandas dataframe
df = pd.read_sql(query, connection)

# Close the connection
connection.close()

# Drop 'First10Moves' if it exists
if 'First10Moves' in df.columns:
    df = df.drop(columns=['First10Moves'])

# Label encode the 'endgame' column
le_endgame = LabelEncoder()
df['endgame'] = le_endgame.fit_transform(df['endgame'])

# Encode categorical columns
le_result = LabelEncoder()
df['Result'] = le_result.fit_transform(df['Result'])

le_event = LabelEncoder()
df['Event'] = le_event.fit_transform(df['Event'])

le_opening = LabelEncoder()
df['opening_name'] = le_opening.fit_transform(df['opening_name'])

# Scale numerical columns
scaler = StandardScaler()
df[['WhiteElo', 'BlackElo']] = scaler.fit_transform(df[['WhiteElo', 'BlackElo']])

# Split the data into features and labels
X = df.drop('endgame', axis=1)  # Features
y = df['endgame']  # Target variable

# Check the class distribution before balancing
print("Class distribution before balancing:", Counter(y))

# Remove classes with fewer than 2 samples
min_samples = 2
class_counts = y.value_counts()
valid_classes = class_counts[class_counts >= min_samples].index

# Filter the dataset to only include valid classes
X = X[y.isin(valid_classes)]
y = y[y.isin(valid_classes)]

# Check class distribution after filtering
print("Class distribution after filtering rare classes:", Counter(y))

# Use SMOTE to balance classes
smote = SMOTE(random_state=42, k_neighbors=3)
X_balanced, y_balanced = smote.fit_resample(X, y)

# Check class distribution after SMOTE
print("Class distribution after balancing:", Counter(y_balanced))

# Split the balanced dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_balanced, y_balanced, test_size=0.2, random_state=42)

# Apply PCA for dimensionality reduction
n_components = min(10, X_train.shape[1])  # Use the smaller of 10 or the number of features
pca = PCA(n_components=n_components)
X_train_pca = pca.fit_transform(X_train)
X_test_pca = pca.transform(X_test)


# Train an SVM model with a linear kernel
svm_model = SVC(kernel='linear', C=1.0, random_state=42)
svm_model.fit(X_train_pca, y_train)

# Make predictions
y_pred = svm_model.predict(X_test_pca)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'SVM Accuracy: {accuracy:.2f}')
print(classification_report(y_test, y_pred))

# Optionally, display a confusion matrix
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", cm)

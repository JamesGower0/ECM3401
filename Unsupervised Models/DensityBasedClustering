from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.cluster import DBSCAN
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import mysql.connector
import numpy as np

# MySQL connection settings
db_config = {
    'user': 'root',
    'password': 'b5CaQ9WK2',
    'host': '127.0.0.1',
    'database': 'chess_openings'
}

# Fetch data
conn = mysql.connector.connect(**db_config)
query = """
SELECT opening_name, WhiteElo, BlackElo FROM openings;
"""
df = pd.read_sql(query, conn)
conn.close()

# Create a new column for average Elo
df['AverageElo'] = df[['WhiteElo', 'BlackElo']].mean(axis=1)

# Encode the categorical feature (opening_name)
label_encoder = LabelEncoder()
df['opening_encoded'] = label_encoder.fit_transform(df['opening_name'])

# Feature set for clustering
features = df[['opening_encoded', 'AverageElo']]

# Standardize the features
scaler = StandardScaler()
features_scaled = scaler.fit_transform(features)

# Determine `eps` using k-distance plot
from sklearn.neighbors import NearestNeighbors

neighbors = NearestNeighbors(n_neighbors=5)
neighbors_fit = neighbors.fit(features_scaled)
distances, indices = neighbors_fit.kneighbors(features_scaled)

# Sort distances and plot
distances = np.sort(distances[:, 4])  # 4th neighbor distance
plt.plot(distances)
plt.title("k-Distance Plot")
plt.xlabel("Data Point Index")
plt.ylabel("4th Nearest Neighbor Distance")
plt.show()

# Set DBSCAN parameters based on k-distance plot
eps = 0.3  # Adjust based on k-distance plot
min_samples = 10  # Minimum points to form a cluster
dbscan = DBSCAN(eps=eps, min_samples=min_samples)
clusters = dbscan.fit_predict(features_scaled)

# Add cluster labels to the DataFrame
df['Cluster'] = clusters

# Visualize clusters in 2D using PCA
pca = PCA(n_components=2)
reduced_features = pca.fit_transform(features_scaled)
df['PCA1'] = reduced_features[:, 0]
df['PCA2'] = reduced_features[:, 1]

plt.figure(figsize=(10, 7))
palette = sns.color_palette("husl", len(set(clusters)) - (1 if -1 in clusters else 0))
sns.scatterplot(data=df, x='PCA1', y='PCA2', hue='Cluster', palette=palette, legend='full')
plt.title("DBSCAN Clusters Visualized in 2D Space")
plt.xlabel("PCA Component 1")
plt.ylabel("PCA Component 2")
plt.legend(title="Cluster", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

# Cluster analysis
for cluster in set(clusters):
    if cluster != -1:  # Exclude noise points
        cluster_data = df[df['Cluster'] == cluster]
        print(f"Cluster {cluster}:")
        print(cluster_data['opening_name'].value_counts().head(5))
        print("Average Elo:", cluster_data['AverageElo'].mean())
        print("\n")

# Noise analysis
noise_points = df[df['Cluster'] == -1]
print(f"Number of noise points: {len(noise_points)}")
